package dfpwm

import (
	"bufio"
	"errors"
	"io"

	"github.com/1lann/dissonance/audio"
)

// SampleRate is the expected sample rate used by DFPWM.
const SampleRate = 48000

const (
	strengthIncrease = 7
	strengthDecrease = 20
	defaultLt        = -127
)

// EncodeDFPWM encodes the given stream into output using DFPWM.
func EncodeDFPWM(output io.Writer, stream audio.Stream) error {
	if stream.SampleRate() != SampleRate {
		return errors.New("dfpwm: sample rate must be 48000 Hz")
	}

	charge := 0
	strength := 0
	lt := defaultLt

	w := bufio.NewWriter(output)
	defer w.Flush()

	input := make([]int8, 8)

	for {
		var b byte

		count := 0
		for count < 8 {
			n, err := stream.Read(input[count:])
			if err == io.EOF {
				return nil
			} else if err != nil {
				return err
			}
			count += n
		}

		for _, v := range input {
			t := 127
			if int(v) < charge || int(v) == -128 {
				t = -128
			}

			b >>= 1
			if t > 0 {
				b |= 0x80
			}

			newCharge := charge + ((strength*(t-charge) + 0x80) >> 8)
			if newCharge == charge && newCharge != t {
				if t == 127 {
					newCharge++
				} else {
					newCharge--
				}
			}
			charge = newCharge

			st := 0
			if t == lt {
				st = 255
			}

			sr := strengthIncrease
			if t == lt {
				sr = strengthDecrease
			}

			ns := strength + ((sr*(st-strength) + 0x80) >> 8)
			if ns == strength && ns != st {
				if st == 255 {
					ns++
				} else {
					ns--
				}
			}

			strength = ns
			lt = t
		}

		w.WriteByte(b)
	}
}
